#pragma once

#include <Protocol.h>
//////////////////////////////////////////////////////////////////////////

#define BBTAN_ODD_NUMBER_INITIAL		(CATEGORY_ODD_NUMBER)
#define BBTAN_ODD_NUMBER_SERVICE		(PROTOCOL_ODD_NUMBER)

BU64DECLARE ODD_BBTAN_INITIAL_RANDOM_NUMBER =	USIGNED64_T(( (__int64)-(BBTAN_ODD_NUMBER_INITIAL*319) - ((C2S_HIGH_VERSION_NO)*100) - ((C2S_MIDDLE_VERSION_NO)*100)) );	// 일단 고정 난수값 (홀수 번호)
BU64DECLARE ODD_BBTAN_SERVICE_RANDOM_NUMBER =	USIGNED64_T(( (__int64)-(BBTAN_ODD_NUMBER_SERVICE*441) - ((C2S_HIGH_VERSION_NO)*100) - ((C2S_MIDDLE_VERSION_NO)*10)) );

#define BBTAN_KEY_INITIAL_GENERATOR(num)	( (BYTE)( ((ODD_BBTAN_INITIAL_RANDOM_NUMBER)*(num))%(TYPE_MAX_ROUND()) ) )
#define BBTAN_KEY_SERVICE_GENERATOR(num)	( (BYTE)( ((ODD_BBTAN_SERVICE_RANDOM_NUMBER)*(num))%(TYPE_MAX_ROUND()) ) )

BU64DECLARE INDEX_BBTAN_RANDOM_NUMBER =		USIGNED64_T( -((__int64)ODD_BBTAN_INITIAL_RANDOM_NUMBER)*(ODD_BBTAN_SERVICE_RANDOM_NUMBER) );
#define INDEX_BBTAN_GENERATOR(num)			( (BYTE)( ((INDEX_BBTAN_RANDOM_NUMBER)*(num))%(TYPE_MAX_ROUND()) ) )

//////////////////////////////////////////////////////////////////////////

BU64DECLARE ODD_BBTAN_INITIAL_RANDOM_NUMBER2 =	USIGNED64_T(( (__int64)-(BBTAN_ODD_NUMBER_INITIAL*337) - ((C2S_HIGH_VERSION_NO)*100) - ((C2S_MIDDLE_VERSION_NO)*100)) );	// 일단 고정 난수값 (홀수 번호)
BU64DECLARE ODD_BBTAN_SERVICE_RANDOM_NUMBER2 =	USIGNED64_T(( (__int64)-(BBTAN_ODD_NUMBER_SERVICE*549) - ((C2S_HIGH_VERSION_NO)*100) - ((C2S_MIDDLE_VERSION_NO)*10)) );

#define BBTAN_KEY_INITIAL_GENERATOR2(num)	( (BYTE)( ((ODD_BBTAN_INITIAL_RANDOM_NUMBER2)*(num))%(TYPE_MAX_ROUND()) ) )
#define BBTAN_KEY_SERVICE_GENERATOR2(num)	( (BYTE)( ((ODD_BBTAN_SERVICE_RANDOM_NUMBER2)*(num))%(TYPE_MAX_ROUND()) ) )

BU64DECLARE INDEX_BBTAN_RANDOM_NUMBER2 =		USIGNED64_T( -((__int64)ODD_BBTAN_INITIAL_RANDOM_NUMBER2)*(ODD_BBTAN_SERVICE_RANDOM_NUMBER2) );
#define INDEX_BBTAN_GENERATOR2(num)			( (BYTE)( ((INDEX_BBTAN_RANDOM_NUMBER2)*(num))%(TYPE_MAX_ROUND()) ) )


inline BOOL PreCalculator( BYTE*& pBYTE, WORD& wRemain )
{
	if( !wRemain )
		return TRUE;
	return FALSE;
}

inline VOID PostCalculator( BYTE*& pBYTE, WORD& wRemain, BYTE& rbyLinkedNo )
{
	++pBYTE;
	--wRemain;
}

